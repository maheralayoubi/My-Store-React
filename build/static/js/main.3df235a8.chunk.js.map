{"version":3,"sources":["logo.svg","components/Button.js","components/Navbar.js","components/Product.js","components/ProductList.js","components/Details.js","components/Cart.js","components/Default.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ButtonContainer","styled","button","Navbar","NavWrapper","className","to","src","logo","alt","Component","nav","Product","ProductList","Details","Cart","Default","App","Fragment","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,kC,0uBCEpC,IAAMC,EAAkBC,IAAOC,OAAV,K,iHCIPC,E,iLAEb,OACI,kBAACC,EAAD,CAAYC,UAAU,+CAKlB,kBAAC,IAAD,CAAMC,GAAG,KACL,yBAAKC,IAAMC,IAAOC,IAAI,QAAQJ,UAAU,kBAE5C,wBAAIA,UAAU,iCACV,wBAAIA,UAAU,iBACd,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,YAAvB,cAKJ,kBAAC,IAAD,CAAMC,GAAG,OAAOD,UAAU,WACtB,kBAACL,EAAD,KACI,0BAAMK,UAAU,QAChB,uBAAGA,UAAU,sBAFjB,iB,GAnBgBK,aA+B9BN,EAAaH,IAAOU,IAAV,KCnCKC,E,iLAEb,OACI,6BACI,uD,GAJqBF,aCChBG,E,iLAEb,OACI,6BACI,kBAAC,EAAD,W,GAJyBH,aCDpBI,E,iLAEb,OACI,6BACI,uD,GAJqBJ,aCAhBK,E,iLAEb,OACI,6BACI,oD,GAJkBL,aCAbM,E,iLAEb,OACI,6BACI,mD,GAJqBN,aCyBtBO,E,iLAdX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAO,IAAIC,UAAcR,IACtC,kBAAC,IAAD,CAAOO,KAAO,WAAWC,UAAaP,IACtC,kBAAC,IAAD,CAAOM,KAAO,QAAQC,UAAaN,IACnC,kBAAC,IAAD,CAAOM,UAAaL,U,GATZN,aCCEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACT,kBAAC,IAAD,KACA,kBAAC,EAAD,OAECC,SAASC,eAAe,SDsHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3df235a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9f7e506d.svg\";","import styled from 'styled-components'\n\nexport const ButtonContainer = styled.button`\n  text-transform: capitalize;\n  font-size: 1.4rem;\n  background: transparent;\n  border: 0.05rem solid var(--lightBlue);\n  color: var(--lightBlue);\n  border-radius: 0.5rem;\n  padding: 0.2rem 0.5rem;\n  cursor: pointer;\n  margin: 0.2rem 0.5rem 0.2rem 0;\n  transition: all 0.5s ease-in-out;\n &:hover {\n     background: var(--lightBlue);\n     color: var(--mainBlue)'\n }\n &:focus {\n    outline: none;\n }\n`;","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport logo from '../logo.svg'\nimport styled from 'styled-components'\nimport { ButtonContainer} from './Button'\n\nexport default class Navbar extends Component {\n    render() {\n        return(\n            <NavWrapper className=\"navbar navbar-expand-sm navbar-dark px-sm-5\">\n                {/* \n                https://www.iconfinder.com/icons/1243689/call_phone_icon\n                Creative Commons (Attribution 3.0 Unported);\n                https://www.iconfinder.com/Makoto_msk */}\n                <Link to='/'>\n                    <img src={ logo } alt=\"store\" className=\"navbar-brand\"/>\n                </Link>\n                <ul className=\"navbar-nav align-items-center\">\n                    <li className=\"nav-item ml-5\">\n                    <Link to='/' className=\"nav-link\">\n                        Products\n                    </Link>\n                    </li>\n                </ul>\n                <Link to='cart' className=\"ml-auto\">\n                    <ButtonContainer>\n                        <span className=\"mr-2\">\n                        <i className=\"fas fa-cart-plus\"></i>\n                        </span>\n                        my cart\n                    </ButtonContainer>\n                </Link>\n            </NavWrapper>\n        )\n    }\n}\n\nconst NavWrapper = styled.nav`\n  background-color: var(--mainBlue);\n`;","import React, { Component } from 'react'\n\nexport default class Product extends Component {\n    render() {\n        return (\n            <div>\n                <h3>Hello Form Product</h3>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Product from \"./Product\"\n\nexport default class ProductList extends Component {\n    render() {\n        return (\n            <div>\n                <Product />\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Details extends Component {\n    render() {\n        return (\n            <div>\n                <h3>Hello From Details</h3>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Cart extends Component {\n    render() {\n        return (\n            <div>\n                <h3>Hello From Cart</h3>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Default extends Component {\n    render() {\n        return (\n            <div>\n                <h3>Page Not Found</h3>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport {Switch,Route} from 'react-router-dom'\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from './components/Navbar';\nimport ProductList from './components/ProductList';\nimport Details from './components/Details';\nimport Cart from './components/Cart';\nimport Default from './components/Default';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar />\n        <Switch>\n          <Route exact path = \"/\" component = { ProductList }></Route>\n          <Route path = \"/details\" component = {Details}></Route>\n          <Route path = \"/cart\" component = {Cart}></Route>\n          <Route component = {Default}></Route>\n        </Switch>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<Router>\n<App />\n</Router>,\n document.getElementById('root')\n );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}